/**
 * Created by XiTU on 4/20/14.
 */

var crypto 		= require('crypto');
var tableNames = require('./tableNames');
var conn = require('./createDBConnectionPool');

exports.manualLogin = function(username, pass, callback) {
    var authSql = " select username, password from " +tableNames.adminLoginTable+ " where username=? ";

    var returnObj = {};
    returnObj.isAuthenticated = false;

    //TODO hash the password
    conn.runQueryWithParams(authSql,[username], function(err,results) {
        if(err) {
            returnObj.errorMessage="Internal error, please try again";
            callback(null,returnObj);
            return;
        }
        console.dir(results);
        if(results.length==1) {
            if(results[0].password===pass){//validatePassword(pass,results[0].password )) {
                returnObj.isAuthenticated = true;
                callback(null, returnObj);
            } else {
                returnObj.errorMessage = " Incorrect password. ";
                callback(null, returnObj);
            }
        } else {
            returnObj.errorMessage = " Incorrect username. ";
            callback(null, returnObj);
        }
    });


}

exports.addNewAccount = function(newData, callback) {
    var newAccountSql = " insert into " + tableNames.adminLoginTable + " (username, password) values (?, ?)";

    conn.runQueryWithParams(newAccountSql,[newData.username, saltAndHash(newData.password)], function(err,results) {
       if(err) {
           throw err;
       }
       callback(results);
    })

}

exports.deleteNewAccount = function(username, callback) {
    var deleteAccountSql = "delete " + tableNames.adminLoginTable + " where username=?";


}

exports.updatePassword = function(email, newPass, callback) {

}


/* private encryption & validation methods */

var generateSalt = function()
{
    var set = '0123456789abcdefghijklmnopqurstuvwxyzABCDEFGHIJKLMNOPQURSTUVWXYZ';
    var salt = '';
    for (var i = 0; i < 10; i++) {
        var p = Math.floor(Math.random() * set.length);
        salt += set[p];
    }
    return salt;
}

var md5 = function(str) {
    return crypto.createHash('md5').update(str).digest('hex');
}

var saltAndHash = function(pass, callback)
{
    var salt = generateSalt();
    callback(salt + md5(pass + salt));
}

var validatePassword = function(plainPass, hashedPass)
{
    var salt = hashedPass.substr(0, 10);
    var validHash = salt + md5(plainPass + salt);
    return hashedPass === validHash;
}