/**
 * Created by XiTU on 1/28/14.
 */

// declare and define all the variables used in the module
var constants = require('./constants');
var tableNames = require('./tableNames');
var dbPool = require('./createDBConnectionPool');
var async = require('async');
var cache = require('memory-cache');
var stringUtils = require('./stringUtils');
var mail=require('./emailUtil');
var runQuery = dbPool.runQuery;
var runQueryWithParams = dbPool.runQueryWithParams;
var connection = dbPool.connection;

//Use mysql-queues to handle mysql single transaction problem
// during ordering.
var queues = require('mysql-queues');
const DEBUG = true;
queues(connection, DEBUG);


var timeoutInMilliSeconds = 1000*60*60*24;  //timeout in 1 day


/****************************************************
 * Common utility for getAll functions
 * return all the requested data in json format.
 * Searching in Cache first, with key @tableName
 *  if key doesn't exist, query from DB, and
 *   then put the key/value pair into Cache
 * @param tableName
 *     the table name which we need to extract from
 * @param callback
 *     callback function to process the results
 ****************************************************/
function getAllFromCacheOrDB(tableName,cacheKey,whereClause,keyName,callback) {
    var data = cache.get(cacheKey);
    //First get the data from cache,
    //if there's no data in cache, query from DB and then put it into cache.
    if(data) {
        console.info("Cache hits, getting " +cacheKey+ " from Cache.");
        callback(data);
    } else {
        var sql = " select * from "+tableName+" "+whereClause;
        runQuery(sql,function(results){

            var allData={};
            //format the results with search key "keyName"
            for(var i in results) {
                var result=results[i];
                //console.log(result);
                allData[result[keyName]]=result;
            }
            console.log("Cache missing, querying "+cacheKey+" from DB.");
            cache.put(cacheKey,allData,timeoutInMilliSeconds);
            callback(allData);
        });
    }
}



/**********************************************
 * getAll% methods
 * @param callback
 *     callback function to process the results
 **********************************************/
exports.getAllScenerySpots = function(callback) {

    var whereClause = " where is_active='Y' ";
    getAllFromCacheOrDB(tableNames.spotTable,"getAllScenerySpots",whereClause, tableNames.spotTableKey,callback);
}

exports.getAllRoutes = function(callback) {

    var whereClause = " where is_active='Y' ";
    getAllFromCacheOrDB(tableNames.routeTable,"getAllRoutes",whereClause, tableNames.routeTableKey,callback);
}

exports.getAllBuses = function(callback) {
    var whereClause = " where is_active='Y' ";
    getAllFromCacheOrDB(tableNames.busTable,"getAllBuses",whereClause,tableNames.busTableKey,callback);
}

exports.getAllDrivers = function(callback) {
    var whereClause = " where is_active='Y' ";
    getAllFromCacheOrDB(tableNames.driverTable,"getAllDrivers",whereClause,tableNames.driverTableKey,callback);
}

//all schedules with date null or later than today
exports.getAllValidSchedules = function(callback) {

    var whereClause = " where schedule_date is null or schedule_date >= now()";
    //Group the schedule results by routeId
    getAllFromCacheOrDB(tableNames.scheduleTable,"getAllValidSchedules",whereClause,tableNames.scheduleTableKey, function(results){

        var scheduleByRouteId={};

        for(var i in results) {
            var result = results[i];
            var routeId= result.route_id;
            var scheduleArray = scheduleByRouteId[routeId];
            if(!scheduleArray) {
                scheduleArray=[];
                scheduleByRouteId[routeId]=scheduleArray;
            }
            scheduleArray.push(result);
        }
        callback(scheduleByRouteId);
    });

}

exports.getAllStartSpots = function(callback) {

    var whereClause = " where is_start='Y' and is_active='Y' ";
    getAllFromCacheOrDB(tableNames.spotTable,"getAllStartSpots",whereClause,tableNames.spotTableKey,callback);

}

exports.getRoutesFromStartSpots = function(callback) {

    var cacheKey = "getRoutesFromStartSpots";
    var data = cache.get(cacheKey);

    if(data) {
        console.log("cache hits, get "+cacheKey +" from cache");
        callback(data);
    } else {
        //getAllFromCacheOrDB(tableNames.routeTable,"", tableNames.routeTableKey, function(results){
        var sql = " select distinct route_id,departure_spot_id,arrival_spot_id, to_label, is_round_trip, distance, travel_time_in_minutes," +
            " duration_in_minutes, route_description,base_price from " + tableNames.routeTable + " rt inner join "+ tableNames.mappingTable +
                " mt on rt.route_id=mt.sku_id where rt.is_active='Y' ";

        runQuery(sql,function(results) {
            console.log(results);
            var routesByDepartureId={};

            for(var i in results) {
                var result = results[i];
                var departureId = result.departure_spot_id;
                console.log("departureId-"+departureId);
                var routesArray = routesByDepartureId[departureId];
                if(!routesArray){
                    routesArray=[];
                    routesByDepartureId[departureId]=routesArray;
                }
                routesArray.push(result);
                //console.log("routesArray-"+routesArray);
            }
            cache.put(cacheKey,routesByDepartureId,timeoutInMilliSeconds);
            callback(routesByDepartureId);
        });
    }
}

exports.getOffersFromRouteId = function(callback) {

    var cacheKey="getOffersFromRouteId";

    var data = cache.get(cacheKey);
    if(data) {
        console.log("cache hits, get "+ cacheKey+" from cache!");
        callback(data);
    } else {

        var sql = " select mt.sku_id as route_id, ot.offer_id, ot.offer_name, ot.offer_price from " + tableNames.mappingTable +" mt inner join " +
                tableNames.offerTable+ " ot on mt.offer_id=ot.offer_id where mt.sku_type = 'R' and ot.is_active='Y' ";

        runQuery(sql, function(results) {
            var offersByRouteId={};

            for(var i in results) {
                var result = results[i];
                var routeId = result.route_id;
                var offerArray = offersByRouteId[routeId];
                if(!offerArray) {
                    offerArray=[];
                    offersByRouteId[routeId]=offerArray;
                }
                offerArray.push(result);
            }
            console.log("cache misses, get "+ cacheKey+" from DB!");

            cache.put(cacheKey,offersByRouteId,timeoutInMilliSeconds);
            callback(offersByRouteId);
        });
    }
}

//What's the final format of offers?
//currently offers are consist of ticketOffers and routeOffers
exports.getAllOffers = function(callback) {

    getAllFromCacheOrDB(tableNames.offerTable,"getAllOffers","",tableNames.offerTableKey,callback);

}

exports.getAllCustomers = function(callback){
    getAllFromCacheOrDB(tableNames.customerTable,"getAllCustomers","",tableNames.customerTableKey,callback);

}

/*********************************************************************
 * Customer /Admin Tools Functionality
 *  Search for Vouchers based on different criteria
 *******************************************************************/

var searchVoucherSQL =  "select voucher.voucher_id as  id, o.order_id, o.confirmation_code , o.total_order_amount, o.order_status, " +
    " voucher.offer_subtotal_amount, customer.customer_id, customer.customer_name, customer.mobile_phone, customer.email, " +
    " offer.offer_id,route.to_label, route.route_id, depart.spot_id as depart_spot_id, depart.spot_name as depart_spot_name, " +
    " arr.spot_id as arrival_spot_id, arr.spot_name as arrival_spot_name, voucher.valid_date, schedule.departure_time, " +
    " offer.offer_name,voucher.quantity, voucher.voucher_description as description " +
    " from " + tableNames.orderTable + " o inner join " + tableNames.voucherTable +" voucher on " +
    " o.order_id = voucher.order_id inner join " + tableNames.customerTable + " customer on o.customer_id=customer.customer_id" +
    " inner join " + tableNames.offerTable+ " offer on voucher.offer_id = offer.offer_id inner join " + tableNames.mappingTable +
    " mapping on mapping.offer_id = offer.offer_id inner join "+ tableNames.routeTable + " route " +
    " on mapping.sku_id = route.route_id inner join " + tableNames.scheduleTable +" schedule on voucher.schedule_id=schedule.schedule_id " +
    " inner join " + tableNames.spotTable + " depart on route.departure_spot_id = depart.spot_id inner join "+ tableNames.spotTable +" arr on " +
    " route.arrival_spot_id=arr.spot_id where voucher.valid_date >= CURRENT_DATE() "; //only look for valid vouchers


exports.getVouchersFromCustomerInfo = function(userInfo, callback) {

    var sql = searchVoucherSQL + " and customer.customer_name=? and customer.mobile_phone= ? " ;

    runQueryWithParams(sql,[userInfo.customerName, userInfo.mobilePhone],function(results) {
        console.dir(results);
        callback(results);
    });
}

exports.getVouchersFromOrderId = function(orderId, callback) {
    var sql = searchVoucherSQL + " and orderId = ? " ;

    runQueryWithParams(sql,[orderId],function(results) {
        console.dir(results);
        callback(results);
    });}

exports.getVouchersFromConfirmationCode = function(confirmCode, callback) {
    var sql = searchVoucherSQL + " and o.confirmation_code= ? ";

    runQueryWithParams(sql,[confirmCode], function(results){
        console.dir(results);
        callback(results);
    })

}

//userInfo. (Json:  name, phone, email )
//orderInfo (oJsonArray: spot_id,valid_date,quantity_price)
exports.placeOrder = function(userInfo, orderInfo, callback){

    //Need async.waterfall to pass parameters in
    //Insert Customer, pass the customerId to order table
    //Insert Order, pass the orderId to voucher table.
    //Need to take care of the rollback technique when one of the steps failed.
    var hasError = false;

    var confirmationCode = stringUtils.generateRandomString(constants.CONFIRM_CODE_LENGTH);
    var returnObject = {};
    returnObject.confirmCode = confirmationCode;
    returnObject.userInfo = userInfo;
    returnObject.orderInfo = orderInfo;
    returnObject.isSuccess = false;

    //need to check whether the confirmationCode is duplicate or not

    async.waterfall([
        //first step, get/create the customerId based on customer information
        function(callback1){

            var params = [userInfo.customerName, userInfo.mobilePhone];
            var selectSql = "select customer_id from "+tableNames.customerTable + " where customer_name=? and mobile_phone = ? ";
            connection.query(selectSql,params, function(error,results){
                if(error) {hasError = true; console.warn("select customer_id failed!"+error); return;}

                if(results && results.length>0) {
                    console.log("customer found, id is "+results[0].customer_id);
                    callback1(null, results[0].customer_id);
                } else {
                       var insertCustomerSQL = "insert into " + tableNames.customerTable + " ( customer_name, mobile_phone, email, is_registered ) " +
                           " VALUES ( ?,?,?,? )";
                       var params = [userInfo.customerName, userInfo.mobilePhone, userInfo.email, 'N'];

                       connection.query(insertCustomerSQL,params,function(error,results) {
                           if(error) {hasError = true; console.warn("insert new customer record failed!"+error); return;}
                           console.log("new customer id "+results.insertId+ " created!");
                           callback1(null,results.insertId);
                       })
                }
            })


        },
        //Second step, insert new order record with the returned customerId
        //Third step, insert all the vouchers related to this offer
        function(customerId, callback2){

            //generate orderId
            var orderId = stringUtils.generateOrderId(customerId);

            returnObject.userInfo.customerId = customerId;
            returnObject.orderInfo.orderId = orderId;

            var trans = connection.startTransaction();
            function error(err) {
                if(err && trans.rollback) {
                    hasError = true;
                    trans.rollback();
                    console.error("Insert order transaction failed, rolling back!");
                    throw err;
                }
            }

            var insertOrderSQL = " insert into "+ tableNames.orderTable + " (order_id,customer_id, total_order_amount, confirmation_code, " +
                " order_status, description ) VALUES (?, ?, ?, ?, ?, ?) ";
            var params = [orderId,customerId, orderInfo.totalAmount, confirmationCode, 'booked', 'N/A'];

            trans.query(insertOrderSQL, params, error);

            var vouchers = orderInfo.vouchersArray;

            var insertVoucherSQL = " insert into " + tableNames.voucherTable + " ( voucher_id, order_id, offer_id, sku_id , schedule_id, quantity, " +
                " valid_date, offer_subtotal_amount, sku_type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?,?) ";

            console.dir(vouchers);

            for(var i in vouchers) {
                var voucherId = ""+orderId+i;
                var voucher = vouchers[i];
                var params=[voucherId,orderId, vouchers[i].offerId, voucher.skuId, voucher.scheduleId, voucher.quantity, voucher.validDate, voucher.offerSubtotalAmount,"R"];//voucher.voucherDescription];
                trans.query(insertVoucherSQL, params, error);

            }

            if(hasError==false) {
              trans.commit();
              callback2(null, 'done');
            } else {
                callback2(null,'failed');
                throw new Error("Place order failed!");
            }

        }
    ]
    , function (err, result) {
       if(err) {
           returnObject.isSuccess = false;
           console.error("Error in Place order!");
       } else if (result=='done') {
           returnObject.isSuccess = true;
           console.log("Place order Success!");
           try{
               var mailOptions = {
                   from: "SCTravel <sctravel2014@gmail.com>", // sender address
                   to: userInfo.email, // list of receivers
                   subject: "Your order confirmation from SC travel ", // Subject line
                   text: "Welcome to use SCTravel", // plaintext body
                   html: "<b>Welcome to use SCTravel</b> <p>Your order has been placed. Enjoy your trip!</p>" // html body
               };
               mail.sendEmail(mailOptions,function(error, response){
                    if(error){
                       console.log(error);
                    }else{
                        console.log("Email sent: " + response.message);
                       //res.send("ok");
                    }
                })
           } catch (err){
               console.log(err);
           } finally {

           }

       }
       console.log("return from order"+returnObject.confirmCode);
       callback(returnObject);

    })

}

exports.confirmPayment = function(orderId,callback) {
    var sql = "update " + tableNames.orderTable + " set order_status='paid' where order_id = ? ";

    runQueryWithParams(sql,[orderId],function(results) {
        console.log("Successfully updated to Paid status for order " + orderId);
        callback(results);
    })

}


/***************************************
/* Admin functionalities
/***************************************/

//look up by phone number
exports.getCustomersFromPhoneNumber = function(CustomersFromPhoneNumber,callback) {

    var sql = "select * from sc_customers where mobile_phone =?";

    runQueryWithParams(sql,[CustomersFromPhoneNumber],function(results) {
        console.dir(results);
        callback(results);
    });

}

//look up by confirmation number
exports.getCustomersFromConfirmationNumber = function(confirmNum,callback) {

    var sql = "select C.customer_id,C.customer_name,C.mobile_phone,C.email,C.is_registered from sc_customers as C inner " +
        "join sc_orders as O where C.customer_id = O.customer_id and  O.confirmation_code=?";

    runQueryWithParams(sql,[confirmNum],function(results) {
        console.dir(results);
        callback(results);
    });

}

//lookup by ticket number
exports.getCustomersFromTicketNumber = function(ticketNum,callback) {

    var sql = "select C.customer_id,C.customer_name,C.mobile_phone,C.email,C.is_registered from sc_customers as C inner " +
        "join sc_orders as O on C.customer_id = O.customer_id inner join sc_order_vouchers as V on V.order_id = O.order_id and V.voucher_id=?";

    runQueryWithParams(sql,[ticketNum],function(results) {
        console.dir(results);
        callback(results);
    });

}


//lookup by order number(done)
exports.getCustomersFromOrderNumber = function(CustomersOrderId,callback) {

    var sql = "select C.customer_id,C.customer_name,C.mobile_phone,C.email,C.is_registered from sc_customers as C inner join sc_orders as O where C.customer_id = O.customer_id and  O.customer_id=?";

        runQueryWithParams(sql,[CustomersOrderId],function(results) {
            console.dir(results);
            callback(results);
        });

}


//look up by phone(done)
exports.getCustomersFromPhoneNumber = function(CustomersFromPhoneNumber,callback) {

    var sql = "select * from sc_customers where mobile_phone =?";

    runQueryWithParams(sql,[CustomersFromPhoneNumber],function(results) {
        console.dir(results);
        callback(results);
    });

}

//look up by name(done)
exports.getCustomersFromName = function(CustomersFromName,callback) {

    var sql = "select * from sc_customers where customer_name =?";

    runQueryWithParams(sql,[CustomersFromName],function(results) {
        console.dir(results);
        callback(results);
    });

}










//Insert a record to a table, enable/disable existing records
function insertRecord(tableName,tableColumnNames, values, callback) {
    var insertSql = 'Insert into ' + tableName +
        ' ( ' + stringUtils.getDelimitedStringFromArray(tableColumnNames,',') +' ) VALUES ( ' +
        stringUtils.getDelimitedRepeatString('?',',',tableColumnNames.length) + ' ) ' ;

    connection.query( insertSql, values, function(results){
            callback(results);
    });
}

function disableRecord(tableName, tableKeyName, key, callback) {
    var updateSql = "update "+tableName +" set is_active = 'N' where "+tableKeyName+ " = ? and is_active='Y' ";

    runQueryWithParams(updateSql,[key],function(results){
        callback(results)
    })
}

function enableRecord(tableName, tableKeyName, key, callback) {
    var updateSql = "update "+tableName +" set is_active = 'Y' where "+tableKeyName+ " = ? and is_active='N' ";

    runQueryWithParams(updateSql,[key],function(results){
        callback(results)
    })
}

exports.addScenerySpot = function(tableColumnNames,values,callback){
    insertRecord(tableNames.spotTable, tableColumnNames ,values,callback);

}

exports.disableScenerySpot = function( key, callback) {
    disableRecord(tableNames.spotTable, tableNames.spotTableKey, key, callback);
}
exports.enableScenerySpot = function( key, callback) {
    enableRecord(tableNames.spotTable, tableNames.spotTableKey, key, callback);
}
exports.addRoute = function(tableColumnNames,values,callback) {
    insertRecord(tableNames.routeTable, tableColumnNames,values,callback);
}
exports.disableRoute = function(key,callback) {
    disableRecord(tableNames.routeTable,tableNames.routeTableKey, key, callback);
}
exports.enableRoute = function(key,callback) {
    enableRecord(tableNames.routeTable, tableNames.routeTableKey, key, callback);
}