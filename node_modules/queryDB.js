/**
 * Created by XiTU on 1/28/14.
 */

// declare and define all the variables used in the module
var constants = require('./constants');
var tableNames = require('./tableNames');
var dbPool = require('./createDBConnectionPool');
var async = require('async');
var cache = require('memory-cache');
var runQuery = dbPool.runQuery;
var runQueryWithParams = dbPool.runQueryWithParams;
var connection = dbPool.connection;

//Use mysql-queues to handle mysql single transaction problem
// during ordering.
var queues = require('mysql-queues');
const DEBUG = true;
queues(connection, DEBUG);


var timeoutInMilliSeconds = 1000*60*60*24;  //timeout in 1 day


/****************************************************
 * Common utility for getAll functions
 * return all the requested data in json format.
 * Searching in Cache first, with key @tableName
 *  if key doesn't exist, query from DB, and
 *   then put the key/value pair into Cache
 * @param tableName
 *     the table name which we need to extract from
 * @param callback
 *     callback function to process the results
 ****************************************************/
function getAllFromCacheOrDB(tableName,whereClause,keyName,callback) {
    var data = cache.get(tableName);
    //First get the data from cache,
    //if there's no data in cache, query from DB and then put it into cache.
    if(data) {
        console.info("Cache hits, getting " +tableName+ " from Cache.");
        callback(data);
    } else {
        var sql = " select * from "+tableName+" "+whereClause;
        runQuery(sql,function(results){

            var allData={};
            //format the results with search key "keyName"
            for(var i in results) {
                var result=results[i];
                //console.log(result);
                allData[result[keyName]]=result;
            }
            console.log("Cache missing, querying scenerySpots from DB.");
            cache.put(tableName,allData,timeoutInMilliSeconds);
            callback(allData);
        });
    }
}

/********
 * format of allOfferJson
 *
 *{
  "1": {
    "offerId": 1,
    "offerName": "route1_1",
    "offerPrice": 80,
    "offerDescription": "武侯祠到杜甫草堂半日游 全票",
    "ticketOffer": [
      {
        "offerId": 1,
        "offerName": "route1_1",
        "offerPrice": 80,
        "offerDescription": "武侯祠到杜甫草堂半日游 全票",
        "skuType": "Ticket",
        "skuId": 2,
        "spotName": "杜甫草堂"
      }
    ],
    "routeOffer": [
      {
        "offerId": 1,
        "offerName": "route1_1",
        "offerPrice": 80,
        "offerDescription": "武侯祠到杜甫草堂半日游 全票",
        "skuType": "Route",
        "skuId": 1000001,
        "departureId": 1,
        "arrivalId": 3
      },
      {
        "offerId": 1,
        "offerName": "route1_1",
        "offerPrice": 80,
        "offerDescription": "武侯祠到杜甫草堂半日游 全票",
        "skuType": "Route",
        "skuId": 1000003,
        "departureId": 1,
        "arrivalId": 4
      }
    ]
  },
  more items.....
*}
*
* @param results
*/
function getAllOfferJsonFromDBResults(results) {
    var allOffers={};

    var ticketOffers = results[0];
    var routeOffers = results[1];

    console.log("ticketOffers: "+ticketOffers);
    console.log("routeOffers: "+routeOffers);

    for(var i in ticketOffers) {
        var ticketOffer = ticketOffers[i];
        console.log("ticketOffers["+i+"] : "+ticketOffer);
        var offerId = ticketOffer.offerId;
        var offerDetail = allOffers[offerId];

        //if the offer has not be initialized
        if(offerDetail==undefined || offerDetail==null) {
            offerDetail={};
            offerDetail.offerId=offerId;
            offerDetail.offerName=ticketOffer.offerName;
            offerDetail.offerPrice= ticketOffer.offerPrice;
            offerDetail.offerDescription=ticketOffer.offerDescription;
            offerDetail.ticketOffer=[];
            offerDetail.routeOffer=[];
            allOffers[offerId]=offerDetail;
        }
        offerDetail.ticketOffer.push(ticketOffer);

    }

    for(var i in routeOffers) {
        var routeOffer = routeOffers[i];
        console.log("routeOffer["+i+"] : "+routeOffer);
        var offerId = routeOffer.offerId;
        var offerDetail = allOffers[offerId];

        if(offerDetail==undefined || offerDetail==null) {
            offerDetail={};
            offerDetail.offerId=offerId;
            offerDetail.offerName=routeOffer.offerName;
            offerDetail.offerPrice= routeOffer.offerPrice;
            offerDetail.offerDescription=routeOffer.offerDescription;
            offerDetail.ticketOffer=[];
            offerDetail.routeOffer=[];
            allOffers[offerId]=offerDetail;
        }
        offerDetail.routeOffer.push(routeOffer);
    }

    return allOffers;
}


/**********************************************
 * getAll% methods
 * @param callback
 *     callback function to process the results
 **********************************************/

exports.getAllScenerySpots = function(callback) {

    getAllFromCacheOrDB(tableNames.spotTable,"", tableNames.spotTableKey,callback);
}

exports.getAllRoutes = function(callback) {

    getAllFromCacheOrDB(tableNames.routeTable,"", tableNames.routeTableKey,callback);
}

exports.getAllBuses = function(callback) {
    getAllFromCacheOrDB(tableNames.busTable,"",tableNames.busTableKey,callback);
}

exports.getAllDrivers = function(callback) {
    getAllFromCacheOrDB(tableNames.driverTable,"",tableNames.driverTableKey,callback);
}

//all schedules with date null or later than today
exports.getAllValidSchedules = function(callback) {

    var whereClause = " where schedule_date is null or schedule_date >= now()";
    getAllFromCacheOrDB(tableNames.scheduleTable,whereClause,tableNames.scheduleTableKey, function(results){

        var scheduleByRouteId={};

        for(var i in results) {
            var result = results[i];
            var routeId= result.route_id;
            var scheduleArray = scheduleByRouteId[routeId];
            if(!scheduleArray) {
                scheduleArray=[];
                scheduleByRouteId[routeId]=scheduleArray;
            }
            scheduleArray.push(result);
        }
        callback(scheduleByRouteId);
    });

}

exports.getAllStartSpots = function(callback) {

    var whereClause = " where is_start='Y' ";
    getAllFromCacheOrDB(tableNames.spotTable,whereClause,tableNames.spotTableKey,callback);

}

exports.getRoutesFromStartSpots = function(callback) {

    //getAllFromCacheOrDB(tableNames.routeTable,"", tableNames.routeTableKey, function(results){
    var sql = " select distinct route_id,departure_spot_id,arrival_spot_id, to_label, is_round_trip, distance, travel_time_in_minutes," +
        " duration_in_minutes, route_description,base_price from " + tableNames.routeTable + " rt inner join "+ tableNames.mappingTable +
                " mt on rt.route_id=mt.sku_id";

    runQuery(sql,function(results) {
        console.log(results);
        var routesByDepartureId={};

        for(var i in results) {
            var result = results[i];
            var departureId = result.departure_spot_id;
            console.log("departureId-"+departureId);
            var routesArray = routesByDepartureId[departureId];
            if(!routesArray){
                routesArray=[];
                routesByDepartureId[departureId]=routesArray;
            }
            routesArray.push(result);
            //console.log("routesArray-"+routesArray);
        }

        callback(routesByDepartureId);
    });
}

exports.getOffersFromRouteId = function(callback) {

    //var sql = " select oot.route_id, mp.category, mp.offer_id from " +tableNames.mappingTable +" mp inner join (select offer_id,route_id from "+tableNames.routeTable+" rt inner join "+tableNames.mappingTable +
     //           " mt on rt.route_id= mt.sku_id where mt.sku_type='R' ) oot on oot.offer_id=mp.offer_id where mp.sku_type='T' ";

    var sql = " select mt.sku_id as route_id, ot.offer_id, ot.offer_name, ot.offer_price from " + tableNames.mappingTable +" mt inner join " +
                tableNames.offerTable+ " ot on mt.offer_id=ot.offer_id where mt.sku_type = 'R' ";

    runQuery(sql, function(results) {
        var offersByRouteId={};

        for(var i in results) {
            var result = results[i];
            var routeId = result.route_id;
            var offerArray = offersByRouteId[routeId];
            if(!offerArray) {
                offerArray=[];
                offersByRouteId[routeId]=offerArray;
            }
            offerArray.push(result);
        }
        callback(offersByRouteId);
    });
}

//What's the final format of offers?
//currently offers are consist of ticketOffers and routeOffers
exports.getAllOffers = function(callback) {

    getAllFromCacheOrDB(tableNames.offerTable,"",tableNames.offerTableKey,callback);

    /*
    var data = cache.get(constants.ALL_OFFERS_JSON);

    if(data) {
        callback(data);
    } else {

        var getTicketsOfferSQL=" select ot.offer_id as offerId, ot.offer_name as offerName, ot.offer_price as offerPrice, " +
            " ot.offer_description as offerDescription ,mp.sku_type as skuType, spot.spot_id as spotId,  " +
            " spot.spot_name as spotName  from " +
            tableNames.offerTable +" ot inner join "+
            tableNames.mappingTable + " mp on ot.offer_id = mp.offer_id " +" inner join " +
            tableNames.spotTable + " spot on mp.sku_id = spot.spot_id where mp.sku_type='Ticket' ";

        var getRoutesOfferSQL=" select ot.offer_id as offerId, ot.offer_name as offerName, ot.offer_price as offerPrice, " +
            " ot.offer_description as offerDescription, mp.sku_type as skuType, route.route_id as routeId, " +
            " route.departure_spot_id as departureId, route.arrival_spot_id as arrivalId from " +
            tableNames.offerTable +" ot inner join "+
            tableNames.mappingTable + " mp on ot.offer_id = mp.offer_id "+" inner join " +
            tableNames.routeTable+ " route on mp.sku_id = route.route_id where mp.sku_type='Route' ";


        async.series(
          [
            function(callback1){
                runQuery(getTicketsOfferSQL,function(results){
                    console.log("getTicketsOfferSQL: "+results);
                    callback1(null,results);
                })
            },
            function(callback2){
                runQuery(getRoutesOfferSQL,function(results){
                    console.log("getRoutesOfferSQL: "+results);
                    callback2(null,results);
                })
            }
          ],
          function(err, results) {
                console.log("result: " + results);
                var jsonResults = getAllOfferJsonFromDBResults(results);
                //deal with the result format
                cache.put(constants.ALL_OFFERS_JSON,jsonResults,timeoutInMilliSeconds);
                callback(jsonResults);
          }
        );
    }*/

}

exports.getAllCustomers = function(callback){
    getAllFromCacheOrDB(tableNames.customerTable,"",tableNames.customerTableKey,callback);

}

exports.getVouchersFromOrderId = function(orderId, callback) {
    var whereClause = " where orderId =  " + orderId; //maybe unsafe to do so

    getAllFromCacheOrDB(tableNames.voucherTable,whereClause,tableNames.voucherTableKey,callback);
}

exports.getAllValidVouchers = function(callback) {
    var whereClause = " where valid_date >= CURRENT_DATE() ";
    getAllFromCacheOrDB(tableNames.voucherTable,whereClause,tableNames.voucherTableKey,callback);
}
/*

//First check if there's any override date, if not, use null date
exports.getScheduleForRoute = function(sku_id, date, callback) {

    var sql = "select * from " + tableNames.scheduleTable + " where sku_id= ? and ( date = ? || date is null) ";

    var userInput = [sku_id, date];
    runQueryWithParams(sql,userInput,callback);

}

exports.getOrderFromConfirmationCode = function(confirmationCode, spotId, date, timeSlot, callback) {
    //var sql = " select order_id from "+orderTable+" where confirmation_code="+confirmationCode;

    var sqlValidate = "update "+tableNames.ticketTable+" set is_valid='N', redeem_datetime=sysdate() where confirmation_code=? and spot_Id=? and valid_date=?  and time_slot=? and (is_valid='Y' or is_valid is NULL) ";

    var userInput=[confirmationCode,spotId,date,timeSlot];

    runQueryWithParams(sqlValidate,userInput,callback);

}

exports.getOrderFromPhone = function(phoneNumber, callback) {

}
*/
//userInfo. (Json:  name, phone, email )
//orderInfo (oJsonArray: spot_id,valid_date,quantity_price)
exports.placeOrder = function(userInfo, orderInfo, confirmationCode, callback){

    //Need async.waterfall to pass parameters in
    //Insert Customer, pass the customerId to order table
    //Insert Order, pass the orderId to voucher table.
    //Need to take care of the rollback technique when one of the steps failed.


    async.waterfall([
        //first step, get/create the customerId based on customer information
        function(callback1){

            var params = [userInfo.customerName, userInfo.mobilePhone];
            var selectSql = "select customer_id from "+tableNames.customerTable + " where customer_name=? and mobile_phone = ? ";
            connection.query(selectSql,params, function(error,results){
                if(error) {console.warn("select customer_id failed!"+error); return;}

                if(results && results.length>0) {
                    console.log("customer found, id is "+results[0].customer_id);
                    callback1(null, results[0].customer_id);
                } else {
                       var insertCustomerSQL = "insert into " + tableNames.customerTable + " ( customer_name, mobile_phone, email, is_registered ) " +
                           " VALUES ( ?,?,?,? )";
                       var params = [userInfo.customerName, userInfo.mobilePhone, userInfo.email, 'N'];

                       connection.query(insertCustomerSQL,params,function(error,results) {
                           if(error) {console.warn("insert new customer record failed!"+error); return;}
                           console.log("new customer id "+results.insertId+ " created!");
                           callback1(null,results.insertId);
                       })
                }
            })


        },
        //Second step, insert new order record with the returned customerId
        function(customerId, callback2){

            var insertOrderSQL = " insert into "+ tableNames.orderTable + " (customer_id, total_order_amount, confirmation_code, " +
                " order_status, description ) VALUES (?, ?, ?, ?, ?) ";
            var params = [customerId, orderInfo.totalAmount, confirmationCode, orderInfo.orderStatus, 'N/A'];

            connection.query(insertOrderSQL,params, function(error,results){
                if(error) { console.warn("create order failed!"+error); return; }
                console.log("new orderId - "+results.insertId);
                callback2(null, results.insertId);
            })

        },
        //Third step, insert all the vouchers related to this offer
        function(orderId, callback3){

            var vouchers = orderInfo.vouchersArray;

            var insertVoucherSQL = " insert into " + tableNames.voucherTable + " ( order_id, offer_id, sku_id , schedule_id, quantity, " +
                " valid_date, voucher_description ) VALUES ( ?, ?, ?, ?, ?, ?, ?) ";

            var tasks=[];
            console.dir(vouchers);

            for(var j in vouchers) {
                var i=j;
                var voucher = vouchers[i];
                var params=[orderId, vouchers[i].offerId, voucher.skuId, voucher.scheduleId, voucher.quantity, voucher.validDate, voucher.voucherDescription];
                connection.query(insertVoucherSQL, params, function(error, results) {

                    if(error) {console.warn("insert voucher failed!"+error); return; }
                    console.log("new voucherId : "+results.insertId);
                    //callback(results.insertId);

                })

            }
            //console.dir(tasks[0]);

            //async.parallel(tasks,function (err, results) {
             //   console.log(' err: ', err); // -> undefined
            //console.log('place order results: ', results); // ->[ 'a400', 'a200', 'a300' ]
            //});

            // arg1 now equals 'three'
            callback3(null, 'done');
        }


    ]
    , function (err, result) {
        if(result=='done') console.log("Success!");
    })
    //First, extract/create the customerId based on customer information
    //Name and phone should be unique


}




/***************************************
/* Admin functionalities
/***************************************/

exports.addScenerySpot = function(spotId,date,time_slot,callback){
    var sql="";
    runQueryWithParams(sqlCheckInventory,[spotId,date,time_slot],callback);

}