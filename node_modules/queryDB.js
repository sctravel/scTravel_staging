/**
 * Created by XiTU on 1/28/14.
 */

// declare and define all the variables used in the module
var constants = require('./constants');
var tableNames = require('./tableNames');
var dbPool = require('./createDBConnectionPool');
var async = require('async');
var cache = require('memory-cache');
var runQuery = dbPool.runQuery;
var runQueryWithParams = dbPool.runQueryWithParams;
var connection = dbPool.connection;

var timeoutInMilliSeconds = 1000*60*60*24;  //timeout in 1 day


/****************************************************
 * Common utility for getAll functions
 * return all the requested data in json format.
 * Searching in Cache first, with key @tableName
 *  if key doesn't exist, query from DB, and
 *   then put the key/value pair into Cache
 * @param tableName
 *     the table name which we need to extract from
 * @param callback
 *     callback function to process the results
 ****************************************************/
function getAllFromCacheOrDB(tableName,whereClause,callback) {
    var data = cache.get(tableName);
    //First get the data from cache,
    //if there's no data in cache, query from DB and then put it into cache.
    if(data) {
        console.info("Cache hits, getting " +tableName+ " from Cache.");
        callback(data);
    } else {
        var sql = " select * from "+tableName+" "+whereClause;
        runQuery(sql,function(results){
            console.log("Cache missing, querying scenerySpots from DB.");
            cache.put(tableName,results,timeoutInMilliSeconds);
            callback(results);
        });
    }
}

/********
 * format of allOfferJson
 *
 *{
  "1": {
    "offerId": 1,
    "offerName": "route1_1",
    "offerPrice": 80,
    "offerDescription": "武侯祠到杜甫草堂半日游 全票",
    "ticketOffer": [
      {
        "offerId": 1,
        "offerName": "route1_1",
        "offerPrice": 80,
        "offerDescription": "武侯祠到杜甫草堂半日游 全票",
        "skuType": "Ticket",
        "skuId": 2,
        "spotName": "杜甫草堂"
      }
    ],
    "routeOffer": [
      {
        "offerId": 1,
        "offerName": "route1_1",
        "offerPrice": 80,
        "offerDescription": "武侯祠到杜甫草堂半日游 全票",
        "skuType": "Route",
        "skuId": 1000001,
        "departureId": 1,
        "arrivalId": 3
      },
      {
        "offerId": 1,
        "offerName": "route1_1",
        "offerPrice": 80,
        "offerDescription": "武侯祠到杜甫草堂半日游 全票",
        "skuType": "Route",
        "skuId": 1000003,
        "departureId": 1,
        "arrivalId": 4
      }
    ]
  },
  more items.....
*}
*
* @param results
*/
function getAllOfferJsonFromDBResults(results) {
    var allOffers={};

    var ticketOffers = results[0];
    var routeOffers = results[1];

    console.log("ticketOffers: "+ticketOffers);
    console.log("routeOffers: "+routeOffers);

    for(var i in ticketOffers) {
        var ticketOffer = ticketOffers[i];
        console.log("ticketOffers["+i+"] : "+ticketOffer);
        var offerId = ticketOffer.offerId;
        var offerDetail = allOffers[offerId];

        //if the offer has not be initialized
        if(offerDetail==undefined || offerDetail==null) {
            offerDetail={};
            offerDetail.offerId=offerId;
            offerDetail.offerName=ticketOffer.offerName;
            offerDetail.offerPrice= ticketOffer.offerPrice;
            offerDetail.offerDescription=ticketOffer.offerDescription;
            offerDetail.ticketOffer=[];
            offerDetail.routeOffer=[];
            allOffers[offerId]=offerDetail;
        }
        offerDetail.ticketOffer.push(ticketOffer);

    }

    for(var i in routeOffers) {
        var routeOffer = routeOffers[i];
        console.log("routeOffer["+i+"] : "+routeOffer);
        var offerId = routeOffer.offerId;
        var offerDetail = allOffers[offerId];

        if(offerDetail==undefined || offerDetail==null) {
            offerDetail={};
            offerDetail.offerId=offerId;
            offerDetail.offerName=routeOffer.offerName;
            offerDetail.offerPrice= routeOffer.offerPrice;
            offerDetail.offerDescription=routeOffer.offerDescription;
            offerDetail.ticketOffer=[];
            offerDetail.routeOffer=[];
            allOffers[offerId]=offerDetail;
        }
        offerDetail.routeOffer.push(routeOffer);
    }

    return allOffers;
}


/**********************************************
 * getAll% methods
 * @param callback
 *     callback function to process the results
 **********************************************/

exports.getAllScenerySpots = function(callback) {

    getAllFromCacheOrDB(tableNames.spotTable,"",callback);
}

exports.getAllRoutes = function(callback) {

    getAllFromCacheOrDB(tableNames.routeTable,"",callback);
}

exports.getAllTickets = function(callback) {
    getAllFromCacheOrDB(tableNames.ticketTable,"",callback);
}

exports.getAllBuses = function(callback) {
    getAllFromCacheOrDB(tableNames.busTable,"",callback);
}

exports.getAllDrivers = function(callback) {
    getAllFromCacheOrDB(tableNames.driverTable,"",callback);
}

//all schedules with date null or later than today
exports.getAllValidSchedules = function(callback) {

    var whereClause = " where schedule_date is null or schedule_date >= now()";
    getAllFromCacheOrDB(tableNames.scheduleTable,whereClause,callback);

}



//What's the final format of offers?
//currently offers are consist of ticketOffers and routeOffers
exports.getAllOffers = function(callback) {

    var data = cache.get(constants.ALL_OFFERS_JSON);

    if(data) {
        callback(data);
    } else {

        var getTicketsOfferSQL=" select ot.offer_id as offerId, ot.offer_name as offerName, ot.offer_price as offerPrice, " +
            " ot.offer_description as offerDescription ,mp.sku_type as skuType, spot.spot_id as skuId,  " +
            " spot.spot_name as spotName  from " +
            tableNames.offerTable +" ot inner join "+
            tableNames.mappingTable + " mp on ot.offer_id = mp.offer_id " +" inner join " +
            tableNames.spotTable + " spot on mp.sku_id = spot.spot_id where mp.sku_type='Ticket' ";

        var getRoutesOfferSQL=" select ot.offer_id as offerId, ot.offer_name as offerName, ot.offer_price as offerPrice, " +
            " ot.offer_description as offerDescription, mp.sku_type as skuType, route.route_id as skuId, " +
            " route.departure_spot_id as departureId, route.arrival_spot_id as arrivalId from " +
            tableNames.offerTable +" ot inner join "+
            tableNames.mappingTable + " mp on ot.offer_id = mp.offer_id "+" inner join " +
            tableNames.routeTable+ " route on mp.sku_id = route.route_id where mp.sku_type='Route' ";


        async.series(
          [
            function(callback1){
                runQuery(getTicketsOfferSQL,function(results){
                    console.log("getTicketsOfferSQL: "+results);
                    callback1(null,results);
                })
            },
            function(callback2){
                runQuery(getRoutesOfferSQL,function(results){
                    console.log("getRoutesOfferSQL: "+results);
                    callback2(null,results);
                })
            }
          ],
          function(err, results) {
                console.log("result: " + results);
                var jsonResults = getAllOfferJsonFromDBResults(results);
                //deal with the result format
                cache.put(constants.ALL_OFFERS_JSON,jsonResults,timeoutInMilliSeconds);
                callback(jsonResults);
          }
        );
    }

}

exports.getAllCustomers = function(callback){
    getAllFromCacheOrDB(tableNames.customerTable,"",callback);

}

exports.getVouchersFromOrderId = function(orderId, callback) {
    var whereClause = " where orderId =  " + orderId; //maybe unsafe to do so

    getAllFromCacheOrDB(tableNames.voucherTable,whereClause,callback);
}

exports.getAllValidVouchers = function(callback) {
    var whereClause = " where valid_date >= CURRENT_DATE() ";
    getAllFromCacheOrDB(tableNames.voucherTable,whereClause,callback);
}
/*

//First check if there's any override date, if not, use null date
exports.getScheduleForRoute = function(sku_id, date, callback) {

    var sql = "select * from " + tableNames.scheduleTable + " where sku_id= ? and ( date = ? || date is null) ";

    var userInput = [sku_id, date];
    runQueryWithParams(sql,userInput,callback);

}

exports.getOrderFromConfirmationCode = function(confirmationCode, spotId, date, timeSlot, callback) {
    //var sql = " select order_id from "+orderTable+" where confirmation_code="+confirmationCode;

    var sqlValidate = "update "+tableNames.ticketTable+" set is_valid='N', redeem_datetime=sysdate() where confirmation_code=? and spot_Id=? and valid_date=?  and time_slot=? and (is_valid='Y' or is_valid is NULL) ";

    var userInput=[confirmationCode,spotId,date,timeSlot];

    runQueryWithParams(sqlValidate,userInput,callback);

}

exports.getOrderFromPhone = function(phoneNumber, callback) {

}
*/
//userInfo. (Json:  email,phone,name
//orderInfo (JsonArray: spot_id,valid_date,quantity_price)
exports.placeOrder = function(userInfo, orderInfoArray, confirmationCode, status, callback){

    //First, extract/create the customerId based on customer information

    //Second,generate confirmation code and insert record into order table
    //Need to make sure there's no the same confirmation code.

    console.log("confirmationCode:"+confirmationCode);
    var sqlInsertOrder = "insert into "+tableNames.orderTable+" (customer_id, total_order_amount, confirmation_code," +
        "order_status, description) values (?,?,?,?,?)";

    //Third, insert offer details into voucher table
    var sqlInsertVoucher = "insert into "+tableNames.voucherTable+" (order_id,offer_id,sku_id,schedule_id,quantity,valid_date, " +
        " offer_quantity, offer_subtotal_amount, voucher_description ) values (?,?,?,?,?,?,?,?,?) ";

    var userInput=[userInfo.email,userInfo.phone,userInfo.name,userInfo.order_total_amount,confirmationCode,status];

    console.log("userInput--"+userInput);
    pool.getConnection(function(err,connection){
        if(err) { console.log(err); callback(0); return;}

        connection.query(sqlInsertOrder,userInput,function(err,info){
            if(err) {connection.rollback();console.log("transaction rolled back!");throw err;}
            console.log("info.affectedRows=" + info.affectedRows);

            if(info.affectedRows>0) {
                var count=0;
                console.log("o_length=" + orderInfoArray.length);
                for(var i=0;i<orderInfoArray.length;++i) {
                    var ticketInfo=[];
                    console.log("i=" + i);
                    ticketInfo[0]=confirmationCode;
                    ticketInfo[1]=orderInfoArray[i].spot_id;
                    ticketInfo[2]=orderInfoArray[i].valid_date;
                    ticketInfo[3]=orderInfoArray[i].departure;
                    ticketInfo[4]=orderInfoArray[i].quantity;
                    ticketInfo[5]=orderInfoArray[i].total_amount;
                    ticketInfo[6]=orderInfoArray[i].time_slot;

                    console.log("timeSlot=" + orderInfoArray[i].time_slot);
                    connection.query(sqlInsertTicket,ticketInfo,function(err,info){
                        if(err){ connection.rollback();console.log("transaction rolled back!");throw err;}
                        callback(info.affectedRows);
                        ++count;
                        if(count==orderInfoArray.length) {
                            connection.release();
                            console.log("all transaction finished!");
                            callback(1);
                            // pool.end(function (err) {
                            //     if (err) console.error("An error occurred: " + err);
                            //     else console.log("My app terminated");
                            // });
                        }
                    })
                }
            }

            //connection.end();
        })
    })
}




/***************************************
/* Admin functionalities
/***************************************/

exports.addScenerySpot = function(spotId,date,time_slot,callback){
    var sql="";
    runQueryWithParams(sqlCheckInventory,[spotId,date,time_slot],callback);

}