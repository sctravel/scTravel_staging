/**
 * Created by XiTU on 1/28/14.
 */

// declare and define all the variables used in the module
var constants = require('./constants');
var tableNames = require('./tableNames');
var dbPool = require('./createDBConnectionPool');
var async = require('async');
var cache = require('memory-cache');
var stringUtils = require('./stringUtils');
var runQuery = dbPool.runQuery;
var runQueryWithParams = dbPool.runQueryWithParams;
var connection = dbPool.connection;

//Use mysql-queues to handle mysql single transaction problem
// during ordering.
var queues = require('mysql-queues');
const DEBUG = true;
queues(connection, DEBUG);


var timeoutInMilliSeconds = 1000*60*60*24;  //timeout in 1 day


/****************************************************
 * Common utility for getAll functions
 * return all the requested data in json format.
 * Searching in Cache first, with key @tableName
 *  if key doesn't exist, query from DB, and
 *   then put the key/value pair into Cache
 * @param tableName
 *     the table name which we need to extract from
 * @param callback
 *     callback function to process the results
 ****************************************************/
function getAllFromCacheOrDB(tableName,cacheKey,whereClause,keyName,callback) {
    var data = cache.get(cacheKey);
    //First get the data from cache,
    //if there's no data in cache, query from DB and then put it into cache.
    if(data) {
        console.info("Cache hits, getting " +cacheKey+ " from Cache.");
        callback(data);
    } else {
        var sql = " select * from "+tableName+" "+whereClause;
        runQuery(sql,function(results){

            var allData={};
            //format the results with search key "keyName"
            for(var i in results) {
                var result=results[i];
                //console.log(result);
                allData[result[keyName]]=result;
            }
            console.log("Cache missing, querying "+cacheKey+" from DB.");
            cache.put(cacheKey,allData,timeoutInMilliSeconds);
            callback(allData);
        });
    }
}



/**********************************************
 * getAll% methods
 * @param callback
 *     callback function to process the results
 **********************************************/

exports.getAllScenerySpots = function(callback) {

    getAllFromCacheOrDB(tableNames.spotTable,"getAllScenerySpots","", tableNames.spotTableKey,callback);
}

exports.getAllRoutes = function(callback) {

    getAllFromCacheOrDB(tableNames.routeTable,"getAllRoutes","", tableNames.routeTableKey,callback);
}

exports.getAllBuses = function(callback) {
    getAllFromCacheOrDB(tableNames.busTable,"getAllBuses","",tableNames.busTableKey,callback);
}

exports.getAllDrivers = function(callback) {
    getAllFromCacheOrDB(tableNames.driverTable,"getAllDrivers","",tableNames.driverTableKey,callback);
}

//all schedules with date null or later than today
exports.getAllValidSchedules = function(callback) {

    var whereClause = " where schedule_date is null or schedule_date >= now()";
    //Group the schedule results by routeId
    getAllFromCacheOrDB(tableNames.scheduleTable,"getAllValidSchedules",whereClause,tableNames.scheduleTableKey, function(results){

        var scheduleByRouteId={};

        for(var i in results) {
            var result = results[i];
            var routeId= result.route_id;
            var scheduleArray = scheduleByRouteId[routeId];
            if(!scheduleArray) {
                scheduleArray=[];
                scheduleByRouteId[routeId]=scheduleArray;
            }
            scheduleArray.push(result);
        }
        callback(scheduleByRouteId);
    });

}

exports.getAllStartSpots = function(callback) {

    var whereClause = " where is_start='Y' ";
    getAllFromCacheOrDB(tableNames.spotTable,"getAllStartSpots",whereClause,tableNames.spotTableKey,callback);

}

exports.getRoutesFromStartSpots = function(callback) {

    var cacheKey = "getRoutesFromStartSpots";
    var data = cache.get(cacheKey);

    if(data) {
        console.log("cache hits, get "+cacheKey +" from cache");
        callback(data);
    } else {
        //getAllFromCacheOrDB(tableNames.routeTable,"", tableNames.routeTableKey, function(results){
        var sql = " select distinct route_id,departure_spot_id,arrival_spot_id, to_label, is_round_trip, distance, travel_time_in_minutes," +
            " duration_in_minutes, route_description,base_price from " + tableNames.routeTable + " rt inner join "+ tableNames.mappingTable +
                " mt on rt.route_id=mt.sku_id";

        runQuery(sql,function(results) {
            console.log(results);
            var routesByDepartureId={};

            for(var i in results) {
                var result = results[i];
                var departureId = result.departure_spot_id;
                console.log("departureId-"+departureId);
                var routesArray = routesByDepartureId[departureId];
                if(!routesArray){
                    routesArray=[];
                    routesByDepartureId[departureId]=routesArray;
                }
                routesArray.push(result);
                //console.log("routesArray-"+routesArray);
            }
            cache.put(cacheKey,routesByDepartureId,timeoutInMilliSeconds);
            callback(routesByDepartureId);
        });
    }
}

exports.getOffersFromRouteId = function(callback) {

    var cacheKey="getOffersFromRouteId";

    var data = cache.get(cacheKey);
    if(data) {
        console.log("cache hits, get "+ cacheKey+" from cache!");
        callback(data);
    } else {

        var sql = " select mt.sku_id as route_id, ot.offer_id, ot.offer_name, ot.offer_price from " + tableNames.mappingTable +" mt inner join " +
                tableNames.offerTable+ " ot on mt.offer_id=ot.offer_id where mt.sku_type = 'R' ";

        runQuery(sql, function(results) {
            var offersByRouteId={};

            for(var i in results) {
                var result = results[i];
                var routeId = result.route_id;
                var offerArray = offersByRouteId[routeId];
                if(!offerArray) {
                    offerArray=[];
                    offersByRouteId[routeId]=offerArray;
                }
                offerArray.push(result);
            }
            console.log("cache misses, get "+ cacheKey+" from DB!");

            cache.put(cacheKey,offersByRouteId,timeoutInMilliSeconds);
            callback(offersByRouteId);
        });
    }
}

//What's the final format of offers?
//currently offers are consist of ticketOffers and routeOffers
exports.getAllOffers = function(callback) {

    getAllFromCacheOrDB(tableNames.offerTable,"getAllOffers","",tableNames.offerTableKey,callback);

}

exports.getAllCustomers = function(callback){
    getAllFromCacheOrDB(tableNames.customerTable,"getAllCustomers","",tableNames.customerTableKey,callback);

}

/**
 * Customer Tools Functionality
 *
 */
exports.getAllVouchersFromCustomerInfo = function(userInfo, callback) {

    var sql = "select * from " + tableNames.customerTable +
        " customer inner join " + tableNames.orderTable + " order on customer.customer_id = order.customer_id inner join " +
        tableNames.voucherTable + " voucher on voucher.order_id = order.order_id where customer.customer_name = ? and " +
        " customer.mobile_phone = ? ";

    runQueryWithParams(sql,[userInfo.customerName, userInfo.mobilePhone],function(results) {
        console.dir(results);
        callback(results);
    });
}

exports.getVouchersFromOrderId = function(orderId, callback) {
    var whereClause = " where orderId =  " + orderId; //maybe unsafe to do so

    getAllFromCacheOrDB(tableNames.voucherTable,"getVouchersFromOrderId",whereClause,tableNames.voucherTableKey,callback);
}

exports.getVouchersFromConfirmationCode = function(confirmCode, callback) {
    var sql = "select * from " + tableNames.orderTable + " order inner join " + tableNames.voucherTable +" voucher on " +
        " order.order_id = voucher.order_id where order.confirmation_code= ? ";

    runQueryWithParams(sql,[confirmCode], function(results){
        console.dir(results);
        callback(results);
    })

}

exports.getAllValidVouchers = function(callback) {
    var whereClause = " where valid_date >= CURRENT_DATE() ";
    getAllFromCacheOrDB(tableNames.voucherTable,"getAllValidVouchers",whereClause,tableNames.voucherTableKey,callback);
}
/*

//First check if there's any override date, if not, use null date
exports.getScheduleForRoute = function(sku_id, date, callback) {

    var sql = "select * from " + tableNames.scheduleTable + " where sku_id= ? and ( date = ? || date is null) ";

    var userInput = [sku_id, date];
    runQueryWithParams(sql,userInput,callback);

}

exports.getVouchersFromConfirmationCode = function(confirmationCode, spotId, date, timeSlot, callback) {
    //var sql = " select order_id from "+orderTable+" where confirmation_code="+confirmationCode;

    var sqlValidate = "update "+tableNames.ticketTable+" set is_valid='N', redeem_datetime=sysdate() where confirmation_code=? and spot_Id=? and valid_date=?  and time_slot=? and (is_valid='Y' or is_valid is NULL) ";

    var userInput=[confirmationCode,spotId,date,timeSlot];

    runQueryWithParams(sqlValidate,userInput,callback);

}

exports.getOrderFromPhone = function(phoneNumber, callback) {

}
*/
//userInfo. (Json:  name, phone, email )
//orderInfo (oJsonArray: spot_id,valid_date,quantity_price)
exports.placeOrder = function(userInfo, orderInfo, callback){

    //Need async.waterfall to pass parameters in
    //Insert Customer, pass the customerId to order table
    //Insert Order, pass the orderId to voucher table.
    //Need to take care of the rollback technique when one of the steps failed.

    var confirmationCode = stringUtils.generateConfirmCode();
    //need to check whether the confirmationCode is duplicate or not

    async.waterfall([
        //first step, get/create the customerId based on customer information
        function(callback1){

            var params = [userInfo.customerName, userInfo.mobilePhone];
            var selectSql = "select customer_id from "+tableNames.customerTable + " where customer_name=? and mobile_phone = ? ";
            connection.query(selectSql,params, function(error,results){
                if(error) {console.warn("select customer_id failed!"+error); return;}

                if(results && results.length>0) {
                    console.log("customer found, id is "+results[0].customer_id);
                    callback1(null, results[0].customer_id);
                } else {
                       var insertCustomerSQL = "insert into " + tableNames.customerTable + " ( customer_name, mobile_phone, email, is_registered ) " +
                           " VALUES ( ?,?,?,? )";
                       var params = [userInfo.customerName, userInfo.mobilePhone, userInfo.email, 'N'];

                       connection.query(insertCustomerSQL,params,function(error,results) {
                           if(error) {console.warn("insert new customer record failed!"+error); return;}
                           console.log("new customer id "+results.insertId+ " created!");
                           callback1(null,results.insertId);
                       })
                }
            })


        },
        //Second step, insert new order record with the returned customerId
        //Third step, insert all the vouchers related to this offer
        function(customerId, callback2){

            //generate orderId
            var orderId = stringUtils.generateOrderId(customerId);

            var trans = connection.startTransaction();
            function error(err) {
                if(err && trans.rollback) {
                    trans.rollback();
                    console.error("Insert order transaction failed, rolling back!");
                    throw err;
                }
            }

            var insertOrderSQL = " insert into "+ tableNames.orderTable + " (order_id,customer_id, total_order_amount, confirmation_code, " +
                " order_status, description ) VALUES (?, ?, ?, ?, ?, ?) ";
            var params = [orderId,customerId, orderInfo.totalAmount, confirmationCode, orderInfo.orderStatus, 'N/A'];

            trans.query(insertOrderSQL, params, error);

            var vouchers = orderInfo.vouchersArray;

            var insertVoucherSQL = " insert into " + tableNames.voucherTable + " ( voucher_id, order_id, offer_id, sku_id , schedule_id, quantity, " +
                " valid_date, voucher_description ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?) ";

            console.dir(vouchers);

            for(var i in vouchers) {
                var voucherId = ""+orderId+i;
                var voucher = vouchers[i];
                var params=[voucherId,orderId, vouchers[i].offerId, voucher.skuId, voucher.scheduleId, voucher.quantity, voucher.validDate, voucher.voucherDescription];
                trans.query(insertVoucherSQL, params, error);

            }
            trans.commit();
            callback2(null, 'done');
        }
    ]
    , function (err, result) {
        if(result=='done') console.log("Success!");
    })
    //First, extract/create the customerId based on customer information
    //Name and phone should be unique


}




/***************************************
/* Admin functionalities
/***************************************/

exports.addScenerySpot = function(spotId,date,time_slot,callback){
    var sql="";
    runQueryWithParams(sqlCheckInventory,[spotId,date,time_slot],callback);

}